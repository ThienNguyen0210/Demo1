const express = require('express');
const path = require('path');
const mysql = require('mysql');
const crypto = require('crypto');
const fs = require('fs');
const session = require('express-session');
const app = express();
const PORT = 3000;
const os = require('os');

// Session
app.use(session({
  secret: 'matkhau-bi-mat',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

// MySQL
const connection = mysql.createConnection({
  host: 'localhost',
  port: '3306',
  user: 'root',
  password: 'Thien0210@',
  database: 'authme'
});
connection.connect(err => {
  if (err) return console.error('‚ùå L·ªói k·∫øt n·ªëi MySQL:', err);
  console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MySQL');
});

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use('/route', express.static(path.join(__dirname, 'route')));
app.use('/route/picture', express.static(path.join(__dirname, 'route/picture')));

// Helper
function normalizeIp(req) {
  const forwarded = req.headers['x-forwarded-for'];
  const ip = forwarded ? forwarded.split(',')[0] : req.socket.remoteAddress;
  return ip.replace(/^::ffff:/, '').replace(/^::1$/, '127.0.0.1');
}
function getLocalIp() {
  const nets = os.networkInterfaces();
  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      if (net.family === 'IPv4' && !net.internal) {
        return net.address;
      }
    }
  }
  return '127.0.0.1';
}

function hashPassword(password) {
  const salt = crypto.randomBytes(8).toString('hex');
  const inner = crypto.createHash('sha256').update(password.trim()).digest('hex');
  const final = crypto.createHash('sha256').update(inner + salt).digest('hex');
  return `$SHA$${salt}$${final}`;
}
function checkPassword(inputPassword, dbHash) {
  const parts = dbHash.split('$');
  if (parts.length !== 4 || parts[1] !== 'SHA') return false;
  const inner = crypto.createHash('sha256').update(inputPassword.trim()).digest('hex');
  const computed = crypto.createHash('sha256').update(inner + parts[2]).digest('hex');
  return computed === parts[3];
}

// Inject user info v√†o HTML
function injectUserInfo(html, username) {
  const userHTML = `
    <div class="flex space-x-4">
      <a href="/profile" class="text-green-400 text-base font-semibold no-underline hover:text-green-300">üë§ ${username}</a>
      <a href="/logout" class="text-red-400 hover:text-red-300 text-sm font-medium">ƒêƒÉng xu·∫•t</a>
    </div>
  `;
  return html.replace(/<div class="flex space-x-4">[\s\S]*?<\/div>/, userHTML);
}

// Route HTML
function renderWithUser(filePath, req, res) {
  fs.readFile(filePath, 'utf8', (err, html) => {
    if (err) return res.send("L·ªói t·∫£i trang");
    const content = req.session.username ? injectUserInfo(html, req.session.username) : html;
    res.send(content);
  });
}
app.get('/', (req, res) => renderWithUser(path.join(__dirname, 'index.html'), req, res));
app.get('/login', (req, res) => {
  if (req.session.username) {
    return res.send("‚úÖ B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p r·ªìi");
  }
  renderWithUser(path.join(__dirname, 'route/login.html'), req, res);
});

app.get('/register', (req, res) => {
  if (req.session.username) {
    return res.send("‚úÖ B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p r·ªìi");
  }
  renderWithUser(path.join(__dirname, 'route/register.html'), req, res);
});


app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/login');
  });
});

// ƒêƒÉng k√Ω
app.post('/register', (req, res) => {
  const { username, email, password, 'confirm-password': confirmPassword } = req.body;
  const ip = normalizeIp(req);
  const now = Math.floor(Date.now() / 1000);

  function sendWithMessage(msg, color = "red") {
    fs.readFile(path.join(__dirname, 'route/register.html'), 'utf8', (err, html) => {
      if (err) return res.send("L·ªói ƒë·ªçc giao di·ªán");
      const final = html.replace(
        /<p id="thongbao"[^>]*>.*?<\/p>/,
        `<p id="thongbao" style="color: ${color}; font-weight: bold; display: block;">${msg}</p>`
      );
      const injected = req.session.username ? injectUserInfo(final, req.session.username) : final;
      res.send(injected);
    });
  }

  if (!username || !email || !password || !confirmPassword) return sendWithMessage('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
  if (password !== confirmPassword) return sendWithMessage('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp');
  if (!/^[a-zA-Z0-9_]{3,16}$/.test(username)) return sendWithMessage('T√™n kh√¥ng h·ª£p l·ªá');
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return sendWithMessage('Email kh√¥ng h·ª£p l·ªá');

  const inputUsername = username.trim();
  const inputEmail = email.trim().toLowerCase();

  connection.query(`SELECT 1 FROM authme WHERE username = ?`, [inputUsername], (err, userRes) => {
    if (err) return sendWithMessage('L·ªói h·ªá th·ªëng');
    if (userRes.length > 0) return sendWithMessage('T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i');
    connection.query(`SELECT COUNT(*) AS count FROM authme WHERE regip = ?`, [ip], (err, ipRes) => {
      if (err) return sendWithMessage('L·ªói h·ªá th·ªëng');
      if (ipRes[0].count >= 20) return sendWithMessage('IP v∆∞·ª£t gi·ªõi h·∫°n');
      connection.query(`SELECT 1 FROM authme WHERE email = ?`, [inputEmail], (err, emailRes) => {
        if (err) return sendWithMessage('L·ªói h·ªá th·ªëng');
        if (emailRes.length > 0) return sendWithMessage('Email ƒë√£ s·ª≠ d·ª•ng');
        const hashed = hashPassword(password);
        const sql = `INSERT INTO authme (username, realname, password, email, ip, lastlogin, x, y, z, world, regdate, regip, isLogged, hasSession, webLogin) VALUES (?, ?, ?, ?, ?, ?, 0, 0, 0, 'world', ?, ?, 0, 0, 0)`;
        connection.query(sql, [inputUsername, inputUsername, hashed, inputEmail, ip, now, now, ip], err => {
          if (err) return sendWithMessage('ƒêƒÉng k√Ω th·∫•t b·∫°i');
          return sendWithMessage('ƒêƒÉng k√Ω th√†nh c√¥ng!', "green");
        });
      });
    });
  });
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;

  function sendLoginMessage(message, color = 'red') {
    fs.readFile(path.join(__dirname, 'route/login.html'), 'utf8', (err, html) => {
      if (err) return res.send("L·ªói t·∫£i trang ƒëƒÉng nh·∫≠p");
      let content = html.replace(
        /<p id="thongbao"[^>]*>.*?<\/p>/,
        `<p id="thongbao" style="color: ${color}; font-weight: bold; display: block;">${message}</p>`
      );
      if (req.session.username) {
        content = injectUserInfo(content, req.session.username);
      }
      res.send(content);
    });
  }

  if (!username || !password) return sendLoginMessage('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß');

  const inputUsername = username.trim();

  connection.query('SELECT * FROM authme WHERE username = ?', [inputUsername], (err, results) => {
    if (err) return sendLoginMessage('L·ªói truy v·∫•n');
    if (results.length === 0) return sendLoginMessage('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');

    const user = results[0];
    if (checkPassword(password, user.password)) {
      const clientIp = normalizeIp(req);

      // N·∫øu ch∆∞a c√≥ sessionId th√¨ t·∫°o
      if (!req.session.sessionId) {
        req.session.sessionId = crypto.randomBytes(16).toString('hex');
      }
      const sessionId = req.session.sessionId;

      req.session.username = user.username;
      req.session.ip = clientIp;

      // Ghi l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p v√†o database
      connection.query(
        'INSERT INTO login_history (username, ip, session_id) VALUES (?, ?, ?)',
        [user.username, clientIp, sessionId]
      );

      return sendLoginMessage(
        `ƒêƒÉng nh·∫≠p th√†nh c√¥ng!<script>setTimeout(() => window.location.href='/', 3000);</script>`,
        'lime'
      );
    } else {
      return sendLoginMessage('Sai m·∫≠t kh·∫©u');
    }
  });
});






app.get('/profile', (req, res) => {
  if (!req.session.username) {
    return res.send("‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p");
  }

  const username = req.session.username;
  const currentSessionId = req.session.sessionId || '';
  const serverIp = req.session.serverIp || 'Kh√¥ng x√°c ƒë·ªãnh';

  connection.query("SELECT email, regip FROM authme WHERE username = ?", [username], (err, results) => {
    if (err || results.length === 0) return res.send("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

    const { email, regip } = results[0];

    // ·∫®n email
    function maskEmail(email) {
      const [name, domain] = email.split("@");
      const nameMasked = name.length <= 2 ? "*".repeat(name.length) : name.substring(0, 2) + "*".repeat(Math.floor(name.length * 0.6));
      const domainMasked = domain.replace(/[^.]/g, "*");
      return `${nameMasked}@${domainMasked}`;
    }

    const maskedEmail = maskEmail(email);

    connection.query(
      "SELECT ip, time FROM login_history WHERE username = ? ORDER BY time DESC LIMIT 10",
      [username],
      (err2, historyRows) => {
        if (err2) return res.send("‚ùå L·ªói l·∫•y l·ªãch s·ª≠");

        let historyHTML = `
          <table class="text-sm w-full text-left border-collapse border border-gray-600">
            <thead class="bg-gray-700 text-white">
              <tr>
                <th class="border border-gray-600 px-2 py-1">#</th>
                <th class="border border-gray-600 px-2 py-1">IP</th>
                <th class="border border-gray-600 px-2 py-1">Th·ªùi gian</th>
              </tr>
            </thead>
            <tbody class="bg-gray-800">`;

        historyRows.forEach((row, index) => {
          historyHTML += `
            <tr>
              <td class="border border-gray-600 px-2 py-1">${index + 1}</td>
              <td class="border border-gray-600 px-2 py-1">${row.ip}</td>
              <td class="border border-gray-600 px-2 py-1">${new Date(row.time).toLocaleString()}</td>
            </tr>`;
        });

        historyHTML += `</tbody></table>`;

        // Li·ªát k√™ c√°c t√†i kho·∫£n li√™n quan (KH√îNG hi·ªÉn th·ªã email)
        connection.query(
          `SELECT username FROM authme 
           WHERE (regip = ? OR sessionId = ?) AND username != ? 
           LIMIT 20`,
          [regip, currentSessionId, username],
          (err3, relatedUsers) => {
            if (err3) return res.send("‚ùå L·ªói truy v·∫•n t√†i kho·∫£n li√™n quan");

            let relatedHTML = '<ul class="list-disc ml-6 space-y-1">';
            if (relatedUsers.length === 0) {
              relatedHTML += '<li class="text-gray-400 italic">Kh√¥ng c√≥ t√†i kho·∫£n li√™n quan n√†o.</li>';
            } else {
              relatedUsers.forEach((u) => {
                relatedHTML += `<li><span class="text-blue-400 font-medium">${u.username}</span></li>`;
              });
            }
            relatedHTML += '</ul>';

            fs.readFile(path.join(__dirname, 'route/profile.html'), 'utf8', (err4, html) => {
              if (err4) return res.send("L·ªói t·∫£i giao di·ªán h·ªì s∆°");

              let htmlWithData = html
                .replace(/<span id="playerName">.*?<\/span>/, `<span id="playerName">${username}</span>`)
                .replace(/<span id="emailMask">.*?<\/span>/, `<span id="emailMask">${maskedEmail}</span>`)
                .replace(/<span id="ipMask">.*?<\/span>/, `<span id="ipMask">${regip}</span>`)
                .replace(/<span id="serverIp">.*?<\/span>/, `<span id="serverIp">${serverIp}</span>`)
                .replace('<!--LOGIN_HISTORY-->', historyHTML)
                .replace('<!--RELATED_ACCOUNTS-->', relatedHTML);

              const injected = injectUserInfo(htmlWithData, username);
              res.send(injected);
            });
          }
        );
      }
    );
  });
});





app.post('/change-password', (req, res) => {
  if (!req.session.username) return res.send("‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p");

  const { oldPassword, newPassword, confirmPassword } = req.body;
  const username = req.session.username;

  function sendMessageToProfile(msg, color = 'red') {
    // G·ªçi l·∫°i GET /profile nh∆∞ng ch√®n th√™m th√¥ng b√°o
    connection.query("SELECT email, regip FROM authme WHERE username = ?", [username], (err, results) => {
      if (err || results.length === 0) return res.send("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");

      const { email, regip } = results[0];
      const [name, domain] = email.split("@");
      const nameMasked = name.length <= 2 ? "*".repeat(name.length) : name.substring(0, 2) + "*".repeat(Math.floor(name.length * 0.6));
      const domainMasked = domain.replace(/[^.]/g, "*");
      const maskedEmail = `${nameMasked}@${domainMasked}`;

      connection.query("SELECT ip, time FROM login_history WHERE username = ? ORDER BY time DESC LIMIT 10", [username], (err2, historyRows) => {
        if (err2) return res.send("‚ùå L·ªói l·∫•y l·ªãch s·ª≠");

        let historyHTML = `<table class="text-sm w-full text-left border-collapse border border-gray-600">
          <thead class="bg-gray-700 text-white">
            <tr>
              <th class="border border-gray-600 px-2 py-1">#</th>
              <th class="border border-gray-600 px-2 py-1">IP</th>
              <th class="border border-gray-600 px-2 py-1">Th·ªùi gian</th>
            </tr>
          </thead>
          <tbody class="bg-gray-800">`;

        historyRows.forEach((row, index) => {
          historyHTML += `
            <tr>
              <td class="border border-gray-600 px-2 py-1">${index + 1}</td>
              <td class="border border-gray-600 px-2 py-1">${row.ip}</td>
              <td class="border border-gray-600 px-2 py-1">${new Date(row.time).toLocaleString()}</td>
            </tr>`;
        });

        historyHTML += `</tbody></table>`;

        fs.readFile(path.join(__dirname, 'route/profile.html'), 'utf8', (err, html) => {
          if (err) return res.send("L·ªói t·∫£i profile");

          let htmlWithData = html
            .replace(/<span id="playerName">.*?<\/span>/, `<span id="playerName">${username}</span>`)
            .replace(/<span id="emailMask">.*?<\/span>/, `<span id="emailMask">${maskedEmail}</span>`)
            .replace(/<span id="ipMask">.*?<\/span>/, `<span id="ipMask">${regip}</span>`)
            .replace(/<span id="serverIp">.*?<\/span>/, `<span id="serverIp">${req.session.serverIp || 'Kh√¥ng x√°c ƒë·ªãnh'}</span>`)
            .replace('<!--LOGIN_HISTORY-->', historyHTML)
            .replace(/<p id="changePasswordMessage"[^>]*>.*?<\/p>/, `<p id="changePasswordMessage" style="color:${color}; font-weight:bold;">${msg}</p>`);

          const injected = injectUserInfo(htmlWithData, username);
          res.send(injected);
        });
      });
    });
  }

  if (!oldPassword || !newPassword || !confirmPassword)
    return sendMessageToProfile("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");

  if (newPassword !== confirmPassword)
    return sendMessageToProfile("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp");

  connection.query("SELECT password FROM authme WHERE username = ?", [username], (err, results) => {
    if (err || results.length === 0) return sendMessageToProfile("L·ªói h·ªá th·ªëng");

    if (!checkPassword(oldPassword, results[0].password))
      return sendMessageToProfile("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");

    const newHash = hashPassword(newPassword);
    connection.query("UPDATE authme SET password = ? WHERE username = ?", [newHash, username], (err) => {
      if (err) return sendMessageToProfile("ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
      return sendMessageToProfile("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", 'lime');
    });
  });
});




app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

const multer = require('multer');
const upload = multer({ dest: path.join(__dirname, 'uploads') });

// Giao di·ªán c·ªông ƒë·ªìng
app.get('/confession', (req, res) => {
  if (!req.session.username) return res.redirect('/login');
  renderWithUser(path.join(__dirname, 'route/confession.html'), req, res);
});

// API l·∫•y danh s√°ch b√†i vi·∫øt
app.get('/confession/posts', (req, res) => {
  connection.query(`SELECT * FROM posts ORDER BY created_at DESC`, (err, posts) => {
    if (err || posts.length === 0) return res.json([]);

    const postIds = posts.map(p => p.id);
    if (postIds.length === 0) return res.json([]);

    connection.query(`SELECT * FROM comments WHERE post_id IN (?)`, [postIds], (err2, comments) => {
      connection.query(`
        SELECT post_id, COUNT(*) AS count FROM likes 
        WHERE post_id IN (?) GROUP BY post_id
      `, [postIds], (err3, likeCounts) => {
        const likeMap = {};
        likeCounts.forEach(l => likeMap[l.post_id] = l.count);

        posts.forEach(p => {
          p.comments = comments.filter(c => c.post_id === p.id);
          p.likes = likeMap[p.id] || 0;
        });

        res.json(posts);
      });
    });
  });
});

// ƒêƒÉng b√†i m·ªõi
app.post('/confession/post', upload.single('image'), (req, res) => {
  if (!req.session.username) return res.redirect('/login');

  console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', req.body, req.file); // Th√™m d√≤ng n√†y ƒë·ªÉ debug
  const { content } = req.body;
  const image = req.file ? req.file.filename : null;

  connection.query(`
    INSERT INTO posts (username, content, image) VALUES (?, ?, ?)
  `, [req.session.username, content, image], (err) => {
    if (err) {
      console.error('L·ªói khi ch√®n b√†i ƒëƒÉng:', err);
      return res.status(500).send('L·ªói server');
    }
    res.redirect('/confession');
  });
});

// B√¨nh lu·∫≠n b√†i vi·∫øt
app.post('/confession/comment', (req, res) => {
  if (!req.session.username) return res.redirect('/login');

  const { post_id, comment } = req.body;

  connection.query(`
    INSERT INTO comments (post_id, username, content) VALUES (?, ?, ?)
  `, [post_id, req.session.username, comment], () => {
    res.redirect('/confession');
  });
});

// Like b√†i vi·∫øt
app.post('/confession/like', (req, res) => {
  if (!req.session.username) return res.redirect('/login');

  const { post_id } = req.body;

  connection.query(`
    SELECT 1 FROM likes WHERE post_id = ? AND username = ?
  `, [post_id, req.session.username], (err, rows) => {
    if (rows.length === 0) {
      connection.query(`
        INSERT INTO likes (post_id, username) VALUES (?, ?)
      `, [post_id, req.session.username], () => {
        res.redirect('/confession');
      });
    } else {
      res.redirect('/confession'); // ƒë√£ like r·ªìi
    }
  });
});


// Start server
app.listen(PORT, () => {
  console.log(`üåê Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
